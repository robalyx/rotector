// Code generated by "enumer -type=UserCategoryType -trimprefix=UserCategoryType"; DO NOT EDIT.

package enum

import (
	"fmt"
	"strings"
)

const _UserCategoryTypeName = "PredatoryCSAMSexualKinkRaceplayCondoOther"

var _UserCategoryTypeIndex = [...]uint8{0, 9, 13, 19, 23, 31, 36, 41}

const _UserCategoryTypeLowerName = "predatorycsamsexualkinkraceplaycondoother"

func (i UserCategoryType) String() string {
	if i < 0 || i >= UserCategoryType(len(_UserCategoryTypeIndex)-1) {
		return fmt.Sprintf("UserCategoryType(%d)", i)
	}
	return _UserCategoryTypeName[_UserCategoryTypeIndex[i]:_UserCategoryTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _UserCategoryTypeNoOp() {
	var x [1]struct{}
	_ = x[UserCategoryTypePredatory-(0)]
	_ = x[UserCategoryTypeCSAM-(1)]
	_ = x[UserCategoryTypeSexual-(2)]
	_ = x[UserCategoryTypeKink-(3)]
	_ = x[UserCategoryTypeRaceplay-(4)]
	_ = x[UserCategoryTypeCondo-(5)]
	_ = x[UserCategoryTypeOther-(6)]
}

var _UserCategoryTypeValues = []UserCategoryType{UserCategoryTypePredatory, UserCategoryTypeCSAM, UserCategoryTypeSexual, UserCategoryTypeKink, UserCategoryTypeRaceplay, UserCategoryTypeCondo, UserCategoryTypeOther}

var _UserCategoryTypeNameToValueMap = map[string]UserCategoryType{
	_UserCategoryTypeName[0:9]:        UserCategoryTypePredatory,
	_UserCategoryTypeLowerName[0:9]:   UserCategoryTypePredatory,
	_UserCategoryTypeName[9:13]:       UserCategoryTypeCSAM,
	_UserCategoryTypeLowerName[9:13]:  UserCategoryTypeCSAM,
	_UserCategoryTypeName[13:19]:      UserCategoryTypeSexual,
	_UserCategoryTypeLowerName[13:19]: UserCategoryTypeSexual,
	_UserCategoryTypeName[19:23]:      UserCategoryTypeKink,
	_UserCategoryTypeLowerName[19:23]: UserCategoryTypeKink,
	_UserCategoryTypeName[23:31]:      UserCategoryTypeRaceplay,
	_UserCategoryTypeLowerName[23:31]: UserCategoryTypeRaceplay,
	_UserCategoryTypeName[31:36]:      UserCategoryTypeCondo,
	_UserCategoryTypeLowerName[31:36]: UserCategoryTypeCondo,
	_UserCategoryTypeName[36:41]:      UserCategoryTypeOther,
	_UserCategoryTypeLowerName[36:41]: UserCategoryTypeOther,
}

var _UserCategoryTypeNames = []string{
	_UserCategoryTypeName[0:9],
	_UserCategoryTypeName[9:13],
	_UserCategoryTypeName[13:19],
	_UserCategoryTypeName[19:23],
	_UserCategoryTypeName[23:31],
	_UserCategoryTypeName[31:36],
	_UserCategoryTypeName[36:41],
}

// UserCategoryTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func UserCategoryTypeString(s string) (UserCategoryType, error) {
	if val, ok := _UserCategoryTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _UserCategoryTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to UserCategoryType values", s)
}

// UserCategoryTypeValues returns all values of the enum
func UserCategoryTypeValues() []UserCategoryType {
	return _UserCategoryTypeValues
}

// UserCategoryTypeStrings returns a slice of all String values of the enum
func UserCategoryTypeStrings() []string {
	strs := make([]string, len(_UserCategoryTypeNames))
	copy(strs, _UserCategoryTypeNames)
	return strs
}

// IsAUserCategoryType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i UserCategoryType) IsAUserCategoryType() bool {
	for _, v := range _UserCategoryTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
