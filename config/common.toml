[common]
version = 1

[common.debug]
# Log level (debug, info, warn, error)
log_level = "info"

# Maximum number of log files to keep before rotation
max_logs_to_keep = 10
# Maximum number of lines per log file
max_log_lines = 5000

# Enable pprof debugging endpoints
enable_pprof = false
# Port for pprof HTTP server if enabled
pprof_port = 6060

[common.loki]
# Enable Grafana Loki integration
enabled = false
# Loki server URL (without /loki/api/v1/push suffix)
url = "http://localhost:3100"
# Maximum number of log entries per batch
batch_max_size = 100
# Maximum time to wait before sending a batch (in milliseconds)
batch_max_wait_ms = 1000
# Basic authentication (optional)
username = ""
password = ""

[common.loki.labels]
service = "rotector"
environment = "development"

[common.proxy]
# Default cooldown period in milliseconds for unspecified endpoints
default_cooldown = 5000
# Duration in milliseconds to mark a proxy as unhealthy after a timeout error
unhealthy_duration = 30000

# Endpoint-specific cooldown periods in milliseconds
[common.proxy.endpoints]
get_friend_count = { pattern = "friends.roblox.com/v1/users/{id}/friends/count", cooldown = 5000 }
get_friends = { pattern = "friends.roblox.com/v1/users/{id}/friends", cooldown = 5000 }
find_friends = { pattern = "friends.roblox.com/v1/users/{id}/friends/find", cooldown = 5000 }
user_info = { pattern = "users.roblox.com/v1/users/{id}", cooldown = 5000 }
user_info_batch = { pattern = "users.roblox.com/v1/users", cooldown = 5000 }
user_favorite_games = { pattern = "games.roblox.com/v2/users/{id}/favorite/games", cooldown = 5000 }
user_games = { pattern = "games.roblox.com/v2/users/{id}/games", cooldown = 5000 }
user_outfits = { pattern = "avatar.roblox.com/v2/avatar/users/{id}/outfits", cooldown = 6000 }
user_outfits_details = { pattern = "avatar.roblox.com/v3/outfits/{id}/details", cooldown = 8000 }
user_groups = { pattern = "groups.roblox.com/v1/users/{id}/groups/roles", cooldown = 5000 }
user_inventory = { pattern = "inventory.roblox.com/v2/users/{id}/inventory", cooldown = 5000 }
thumbnail_batch = { pattern = "thumbnails.roblox.com/v1/batch", cooldown = 1000 }
cdn_thumbnails = { pattern = "tr.rbxcdn.com/30DAY-Avatar-{hash}-Png/{id}/{id}/Avatar/Webp/noFilter", cooldown = 1000 }

[common.roverse]
# Domain for the roverse proxy service (leave empty to disable)
domain = ""
# Secret key for authentication
secret_key = ""
# Maximum concurrent requests to roverse
max_concurrent = 100

[common.circuit_breaker]
# Maximum number of requests allowed to pass through when the circuit is half-open
max_requests = 1
# The cyclic period of the closed state for the circuit breaker to clear the internal counts
interval = 60
# The period of the open state after which the state of the circuit breaker becomes half-open
timeout = 30000

[common.retry]
# Maximum retry attempts
max_retries = 3
# Initial retry delay in milliseconds
delay = 4000
# Maximum retry delay in milliseconds
max_delay = 5000

[common.postgresql]
# Database hostname
host = "127.0.0.1"
# Database port
port = 5432
# Database username
user = "postgres"
# Database password
password = "postgres"
# Database name
db_name = "postgres"

# Maximum open connections
max_open_conns = 8
# Maximum idle connections
max_idle_conns = 8
# Connection lifetime in minutes
max_lifetime = 10
# Idle timeout in minutes
max_idle_time = 10

[common.redis]
# Redis hostname
host = "127.0.0.1"
# Redis port
port = 6379
# Redis username
username = ""
# Redis password
password = ""

[common.openai]
# OpenAI API configuration
base_url = "https://openrouter.ai/api/v1"
api_key = ""
max_concurrent = 100

# Model to use for user analysis
user_model = "gemini-2.5-flash"
# Model to use for user reason analysis
user_reason_model = "grok-4-fast"
# Model to use for friend reason analysis
friend_reason_model = "gemini-2.0-flash"
# Model to use for group reason analysis
group_reason_model = "gemini-2.0-flash"
# Model to use for outfit reason analysis
outfit_reason_model = "gemini-2.0-flash"
# Model to use for category analysis
category_model = "grok-4-fast"
# Model to use for stats analysis
stats_model = "grok-4-fast"
# Model to use for outfit analysis
outfit_model = "gemini-2.5-flash"
# Model to use for message analysis
message_model = "grok-4-fast"
# Model to use for ivan message analysis
ivan_model = "gemini-2.5-flash"

# Model mappings for the provider
[common.openai.model_mappings]
"gemini-2.5-flash" = "google/gemini-2.5-flash-preview-05-20"
"gemini-2.0-flash" = "google/gemini-2.0-flash-001"
"qwen-3-235b-a22b" = "qwen/qwen3-235b-a22b"
"deepseek-v3-0324" = "deepseek/deepseek-chat-v3-0324"
"gpt-4.1-mini" = "openai/gpt-4.1-mini"
"o4-mini" = "openai/o4-mini"
"o4-mini-high" = "openai/o4-mini-high"
"grok-3-mini" = "x-ai/grok-3-mini-beta"
"grok-4-fast" = "x-ai/grok-4-fast"

[common.discord]
# Self-bot token for server scanning
sync_token = ""
